[buildout]
extends= config/base.cfg

# apt install automake libtool
[varnish-build]
compile-vmods = true

[varnish-configuration]
s =
# https://docs.varnish-software.com/tutorials/caching-post-requests/
vcl_import = import bodyaccess; import header;

# TODO: rimuovere l'header authentication (almeno nella fase iniziale
# in cui si fa test con l'autenticazioen basic
vcl_recv =
  ${:s}
  ${:s}    if (req.http.Authorization ~ "^Basic ") { unset req.http.Authorization; }
  ${:s}    if (req.http.Accept ~ "application/json") {
  ${:s}        set req.http.X-RestApi = "1";
  ${:s}    } else {
  ${:s}        set req.http.X-RestApi = "0";
  ${:s}    }
  ${:s}    unset req.http.X-Body-Len;
  ${:s}    if (req.method == "POST" && req.url ~ "/@querystring-search$") {
  ${:s}        std.log("Will cache POST for: " + req.http.host + req.url);
  ${:s}        std.cache_req_body(500KB);
  ${:s}        set req.http.X-Body-Len = bodyaccess.len_req_body();
  ${:s}        if (req.http.X-Body-Len == "-1") {
  ${:s}            return(synth(400, "The request body size exceeds the limit"));
  ${:s}        }
  ${:s}        # return (hash);
  ${:s}        set req.method = "GET";
  ${:s}    }
  ${:s}    if (req.url ~ ".*/@@download/file/.*") {
  ${:s}         return(pass);
  ${:s}    }

vcl_hash =
  ${:s}
  ${:s}  hash_data(req.http.X-RestApi);
  ${:s}  # To cache POST and PUT requests
  ${:s}  if (req.http.X-Body-Len) {
  ${:s}      bodyaccess.hash_req_body();
  ${:s}  } else {
  ${:s}      hash_data("");
  ${:s}  }

vcl_backend_response +=
   ${:s}    # se non c'Ã¨ il cookie auth_token non ha senso fare un set-cookie per toglierlo
   ${:s}    if (!bereq.http.cookie ~ "auth_token") {
   ${:s}        header.remove(beresp.http.Set-Cookie, "auth_token=;");
   ${:s}    }

vcl_backend_fetch =
  ${:s}
  ${:s}   if (bereq.http.X-Body-Len) {
  ${:s}       set bereq.method = "POST";
  ${:s}   }

cookie-whitelist =
  statusmessages
  __ac
  _ZopeId
  __cp
  auth_token

cookie-pass = "auth_token|__ac(|_(name|password|persistent))=":"\.(js|css|kss)$"

